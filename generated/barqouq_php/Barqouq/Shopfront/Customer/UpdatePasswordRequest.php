<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: shopfront/customer/customer.proto

namespace Barqouq\Shopfront\Customer;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 * Generated from protobuf message <code>barqouq.shopfront.customer.UpdatePasswordRequest</code>
 */
class UpdatePasswordRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The subdomain associated with the client, used for identifying
     * different tenants in a multi-tenant environment. This field allows
     * the API to determine which tenant the request belongs to.
     *
     * Generated from protobuf field <code>string subdomain = 1 [json_name = "subdomain"];</code>
     */
    protected $subdomain = '';
    /**
     * The client key used for API authentication, ensuring that the request
     * is coming from a trusted client application. This key helps in
     * verifying the identity of the client making the request.
     *
     * Generated from protobuf field <code>string client_key = 2 [json_name = "clientKey"];</code>
     */
    protected $client_key = '';
    /**
     * A token used for authenticating the user in subsequent API requests,
     * ensuring that they do not need to re-authenticate frequently.
     *
     * Generated from protobuf field <code>string user_token = 3 [json_name = "userToken"];</code>
     */
    protected $user_token = '';
    /**
     * The unique identifier of the user requesting the password update.
     * This ID is used to look up the user's current details in the database.
     *
     * Generated from protobuf field <code>string guid = 4 [json_name = "guid"];</code>
     */
    protected $guid = '';
    /**
     * The user's current password. This is required to verify the user's
     * identity before allowing a password change.
     *
     * Generated from protobuf field <code>string old_password = 5 [json_name = "oldPassword"];</code>
     */
    protected $old_password = '';
    /**
     * The new password that the user wishes to set. This password must meet
     * the application's security requirements, such as minimum length and
     * complexity.
     *
     * Generated from protobuf field <code>string new_password = 6 [json_name = "newPassword"];</code>
     */
    protected $new_password = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $subdomain
     *           The subdomain associated with the client, used for identifying
     *           different tenants in a multi-tenant environment. This field allows
     *           the API to determine which tenant the request belongs to.
     *     @type string $client_key
     *           The client key used for API authentication, ensuring that the request
     *           is coming from a trusted client application. This key helps in
     *           verifying the identity of the client making the request.
     *     @type string $user_token
     *           A token used for authenticating the user in subsequent API requests,
     *           ensuring that they do not need to re-authenticate frequently.
     *     @type string $guid
     *           The unique identifier of the user requesting the password update.
     *           This ID is used to look up the user's current details in the database.
     *     @type string $old_password
     *           The user's current password. This is required to verify the user's
     *           identity before allowing a password change.
     *     @type string $new_password
     *           The new password that the user wishes to set. This password must meet
     *           the application's security requirements, such as minimum length and
     *           complexity.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Shopfront\Customer\Customer::initOnce();
        parent::__construct($data);
    }

    /**
     * The subdomain associated with the client, used for identifying
     * different tenants in a multi-tenant environment. This field allows
     * the API to determine which tenant the request belongs to.
     *
     * Generated from protobuf field <code>string subdomain = 1 [json_name = "subdomain"];</code>
     * @return string
     */
    public function getSubdomain()
    {
        return $this->subdomain;
    }

    /**
     * The subdomain associated with the client, used for identifying
     * different tenants in a multi-tenant environment. This field allows
     * the API to determine which tenant the request belongs to.
     *
     * Generated from protobuf field <code>string subdomain = 1 [json_name = "subdomain"];</code>
     * @param string $var
     * @return $this
     */
    public function setSubdomain($var)
    {
        GPBUtil::checkString($var, True);
        $this->subdomain = $var;

        return $this;
    }

    /**
     * The client key used for API authentication, ensuring that the request
     * is coming from a trusted client application. This key helps in
     * verifying the identity of the client making the request.
     *
     * Generated from protobuf field <code>string client_key = 2 [json_name = "clientKey"];</code>
     * @return string
     */
    public function getClientKey()
    {
        return $this->client_key;
    }

    /**
     * The client key used for API authentication, ensuring that the request
     * is coming from a trusted client application. This key helps in
     * verifying the identity of the client making the request.
     *
     * Generated from protobuf field <code>string client_key = 2 [json_name = "clientKey"];</code>
     * @param string $var
     * @return $this
     */
    public function setClientKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->client_key = $var;

        return $this;
    }

    /**
     * A token used for authenticating the user in subsequent API requests,
     * ensuring that they do not need to re-authenticate frequently.
     *
     * Generated from protobuf field <code>string user_token = 3 [json_name = "userToken"];</code>
     * @return string
     */
    public function getUserToken()
    {
        return $this->user_token;
    }

    /**
     * A token used for authenticating the user in subsequent API requests,
     * ensuring that they do not need to re-authenticate frequently.
     *
     * Generated from protobuf field <code>string user_token = 3 [json_name = "userToken"];</code>
     * @param string $var
     * @return $this
     */
    public function setUserToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->user_token = $var;

        return $this;
    }

    /**
     * The unique identifier of the user requesting the password update.
     * This ID is used to look up the user's current details in the database.
     *
     * Generated from protobuf field <code>string guid = 4 [json_name = "guid"];</code>
     * @return string
     */
    public function getGuid()
    {
        return $this->guid;
    }

    /**
     * The unique identifier of the user requesting the password update.
     * This ID is used to look up the user's current details in the database.
     *
     * Generated from protobuf field <code>string guid = 4 [json_name = "guid"];</code>
     * @param string $var
     * @return $this
     */
    public function setGuid($var)
    {
        GPBUtil::checkString($var, True);
        $this->guid = $var;

        return $this;
    }

    /**
     * The user's current password. This is required to verify the user's
     * identity before allowing a password change.
     *
     * Generated from protobuf field <code>string old_password = 5 [json_name = "oldPassword"];</code>
     * @return string
     */
    public function getOldPassword()
    {
        return $this->old_password;
    }

    /**
     * The user's current password. This is required to verify the user's
     * identity before allowing a password change.
     *
     * Generated from protobuf field <code>string old_password = 5 [json_name = "oldPassword"];</code>
     * @param string $var
     * @return $this
     */
    public function setOldPassword($var)
    {
        GPBUtil::checkString($var, True);
        $this->old_password = $var;

        return $this;
    }

    /**
     * The new password that the user wishes to set. This password must meet
     * the application's security requirements, such as minimum length and
     * complexity.
     *
     * Generated from protobuf field <code>string new_password = 6 [json_name = "newPassword"];</code>
     * @return string
     */
    public function getNewPassword()
    {
        return $this->new_password;
    }

    /**
     * The new password that the user wishes to set. This password must meet
     * the application's security requirements, such as minimum length and
     * complexity.
     *
     * Generated from protobuf field <code>string new_password = 6 [json_name = "newPassword"];</code>
     * @param string $var
     * @return $this
     */
    public function setNewPassword($var)
    {
        GPBUtil::checkString($var, True);
        $this->new_password = $var;

        return $this;
    }

}

